from mealpy import Problem
import numpy as np


class GriewankShifted(Problem):
    def __init__(self, bounds=None, minmax="min", name="GriewankShifted", **kwargs):
        super().__init__(bounds, minmax, **kwargs)
        self.name = name

    shift = np.array([104.94691081342978, -135.6761348470227, 92.81100891955543, -10.87108518188711, 407.63013054172563,
                      -223.31315231746964, -224.56627659185563, -222.7632371161696, -338.7309010063917,
                      -236.65660889064418,
                      -102.44810336184622, 126.42998956660733, 145.51932139597716, 362.4195007946686,
                      -136.07822974158148,
                      385.3787391034516, 224.54916653990915, 43.478124239142176, 174.10299590196337, -214.8310656032395,
                      -398.01422639093084, -309.2614310193993, -178.06570153291875, -162.6651823263993,
                      450.850657541738,
                      -454.92932203096916, -419.61768171271166, -297.80826342133184, 66.9431726795051,
                      81.54612611060406,
                      33.75350391540678, 452.7503721088576, -394.37679317004665, 211.96497077719948, 209.2762825707889,
                      -456.2796841185877, 43.786866583660526, 39.94139518856173, -392.0757065399322, 368.3834199650955,
                      -230.1695108177757, 260.9386598025741, 424.9982235544909, 219.5539088594145, -56.74195565523951,
                      353.31823225966764, -314.409074063865, -344.22129416136335, 350.389300480917, 210.6305580593255,
                      -351.3688705488921, -419.56080494622336, -352.4149162964608, -306.0148711883166,
                      234.1092941008617,
                      179.7062426106279, -180.45299833941465, -353.7895714765393, 304.63535113945875,
                      11.040575864524044])

    def obj_func(self, solution):
        solution2 = solution - GriewankShifted.shift

        d = solution2.size
        sum_sq_term = np.sum(solution2 ** 2) / 4000
        prod_cos_term = np.prod(np.cos(solution2 / np.sqrt(np.arange(1, d + 1))))
        return 1 + sum_sq_term - prod_cos_term
