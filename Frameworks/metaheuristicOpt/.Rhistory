)
results <- c()
for (i in 1:runs) {
best.variable <-
metaOpt(problem,
optimType = "MIN",
algorithm = "DE",
dim,
rangeVar,
control)
results <- c(results, best.variable[["optimumValue"]])
filename_runs <- paste("DE-metaheuristicOpt_", problem, "_vars=", dim, "_run=", i, ".csv")
attr(problem, "write_improvements_to_file")(filename_runs)
}
write.table(
results,
file = paste("results/", file_name),
row.names = FALSE,
col.names = FALSE
)
}
runs = 50
de_algorithm(
runs = runs,
pop_size = 50,
iterations = 300,
F = 0.5,
CR = 0.9,
variant = "classical",
# RAND_1_BIN
problem = shifted_sphere,
lb = -100,
ub = 100,
dim = 60,
file_name = "DE-metaheuristicOpt_ShiftedSphereD60.txt"
)
de_algorithm <-
function(runs,
pop_size,
iterations,
F,
CR,
variant,
problem,
lb,
ub,
dim,
file_name) {
rangeVar <- matrix(c(lb, ub), nrow = 2)
control <-
list(
numPopulation = pop_size,
maxIter = iterations,
scalingVector = F,
crossOverRate = CR,
strategy = variant
)
results <- c()
for (i in 1:runs) {
best.variable <-
metaOpt(problem,
optimType = "MIN",
algorithm = "DE",
dim,
rangeVar,
control)
results <- c(results, best.variable[["optimumValue"]])
filename_runs <- paste("DE-metaheuristicOpt_", problem, "_vars=", dim, "_run=", ".csv")
attr(problem, "write_improvements_to_file")(filename_runs)
}
write.table(
results,
file = paste("results/", file_name),
row.names = FALSE,
col.names = FALSE
)
}
runs = 50
de_algorithm(
runs = runs,
pop_size = 50,
iterations = 300,
F = 0.5,
CR = 0.9,
variant = "classical",
# RAND_1_BIN
problem = shifted_sphere,
lb = -100,
ub = 100,
dim = 60,
file_name = "DE-metaheuristicOpt_ShiftedSphereD60.txt"
)
de_algorithm <-
function(runs,
pop_size,
iterations,
F,
CR,
variant,
problem,
lb,
ub,
dim,
file_name) {
rangeVar <- matrix(c(lb, ub), nrow = 2)
control <-
list(
numPopulation = pop_size,
maxIter = iterations,
scalingVector = F,
crossOverRate = CR,
strategy = variant
)
results <- c()
for (i in 1:runs) {
best.variable <-
metaOpt(problem,
optimType = "MIN",
algorithm = "DE",
dim,
rangeVar,
control)
results <- c(results, best.variable[["optimumValue"]])
filename_runs <- paste("DE-metaheuristicOpt_", problem, "_vars=", "_run=", ".csv")
attr(problem, "write_improvements_to_file")(filename_runs)
}
write.table(
results,
file = paste("results/", file_name),
row.names = FALSE,
col.names = FALSE
)
}
runs = 50
de_algorithm(
runs = runs,
pop_size = 50,
iterations = 300,
F = 0.5,
CR = 0.9,
variant = "classical",
# RAND_1_BIN
problem = shifted_sphere,
lb = -100,
ub = 100,
dim = 60,
file_name = "DE-metaheuristicOpt_ShiftedSphereD60.txt"
)
de_algorithm <-
function(runs,
pop_size,
iterations,
F,
CR,
variant,
problem,
lb,
ub,
dim,
file_name) {
rangeVar <- matrix(c(lb, ub), nrow = 2)
control <-
list(
numPopulation = pop_size,
maxIter = iterations,
scalingVector = F,
crossOverRate = CR,
strategy = variant
)
results <- c()
for (i in 1:runs) {
best.variable <-
metaOpt(problem,
optimType = "MIN",
algorithm = "DE",
dim,
rangeVar,
control)
results <- c(results, best.variable[["optimumValue"]])
filename_runs <- paste("DE-metaheuristicOpt_", problem, "_vars=", dim, "_run=", i, ".csv", sep="")
attr(problem, "write_improvements_to_file")(filename_runs)
}
write.table(
results,
file = paste("results/", file_name),
row.names = FALSE,
col.names = FALSE
)
}
runs = 50
de_algorithm(
runs = runs,
pop_size = 50,
iterations = 300,
F = 0.5,
CR = 0.9,
variant = "classical",
# RAND_1_BIN
problem = shifted_sphere,
lb = -100,
ub = 100,
dim = 60,
file_name = "DE-metaheuristicOpt_ShiftedSphereD60.txt"
)
de_algorithm <-
function(runs,
pop_size,
iterations,
F,
CR,
variant,
problem,
lb,
ub,
dim,
file_name,
problem_name) {
rangeVar <- matrix(c(lb, ub), nrow = 2)
control <-
list(
numPopulation = pop_size,
maxIter = iterations,
scalingVector = F,
crossOverRate = CR,
strategy = variant
)
results <- c()
for (i in 1:runs) {
best.variable <-
metaOpt(problem,
optimType = "MIN",
algorithm = "DE",
dim,
rangeVar,
control)
results <- c(results, best.variable[["optimumValue"]])
filename_runs <- paste("DE-metaheuristicOpt_", problem_name, "_vars=", dim, "_run=", i, ".csv",)
attr(problem, "write_improvements_to_file")(filename_runs)
}
write.table(
results,
file = paste("results/", file_name),
row.names = FALSE,
col.names = FALSE
)
}
runs = 50
de_algorithm(
runs = runs,
pop_size = 50,
iterations = 300,
F = 0.5,
CR = 0.9,
variant = "classical",
# RAND_1_BIN
problem = shifted_sphere,
lb = -100,
ub = 100,
dim = 60,
file_name = "DE-metaheuristicOpt_ShiftedSphereD60.txt",
problem_name = "ShiftedSphere"
)
de_algorithm <-
function(runs,
pop_size,
iterations,
F,
CR,
variant,
problem,
lb,
ub,
dim,
file_name,
problem_name) {
rangeVar <- matrix(c(lb, ub), nrow = 2)
control <-
list(
numPopulation = pop_size,
maxIter = iterations,
scalingVector = F,
crossOverRate = CR,
strategy = variant
)
results <- c()
for (i in 1:runs) {
best.variable <-
metaOpt(problem,
optimType = "MIN",
algorithm = "DE",
dim,
rangeVar,
control)
results <- c(results, best.variable[["optimumValue"]])
filename_runs <- paste("DE-metaheuristicOpt_", problem_name, "_vars=", dim, "_run=", i, ".csv")
attr(problem, "write_improvements_to_file")(filename_runs)
}
write.table(
results,
file = paste("results/", file_name),
row.names = FALSE,
col.names = FALSE
)
}
runs = 50
de_algorithm(
runs = runs,
pop_size = 50,
iterations = 300,
F = 0.5,
CR = 0.9,
variant = "classical",
# RAND_1_BIN
problem = shifted_sphere,
lb = -100,
ub = 100,
dim = 60,
file_name = "DE-metaheuristicOpt_ShiftedSphereD60.txt",
problem_name = "ShiftedSphere"
)
de_algorithm <-
function(runs,
pop_size,
iterations,
F,
CR,
variant,
problem,
lb,
ub,
dim,
file_name,
problem_name) {
rangeVar <- matrix(c(lb, ub), nrow = 2)
control <-
list(
numPopulation = pop_size,
maxIter = iterations,
scalingVector = F,
crossOverRate = CR,
strategy = variant
)
results <- c()
for (i in 1:runs) {
best.variable <-
metaOpt(problem,
optimType = "MIN",
algorithm = "DE",
dim,
rangeVar,
control)
results <- c(results, best.variable[["optimumValue"]])
filename_runs <- paste("results/runs/DE-metaheuristicOpt_", problem_name, "_vars=", dim, "_run=", i, ".csv")
attr(problem, "write_improvements_to_file")(filename_runs)
}
write.table(
results,
file = paste("results/", file_name),
row.names = FALSE,
col.names = FALSE
)
}
runs = 50
de_algorithm(
runs = runs,
pop_size = 50,
iterations = 300,
F = 0.5,
CR = 0.9,
variant = "classical",
# RAND_1_BIN
problem = shifted_sphere,
lb = -100,
ub = 100,
dim = 60,
file_name = "DE-metaheuristicOpt_ShiftedSphereD60.txt",
problem_name = "ShiftedSphere"
)
de_algorithm(
runs = runs,
pop_size = 50,
iterations = 300,
F = 0.5,
CR = 0.9,
variant = "classical",
# RAND_1_BIN
problem = shifted_sum_of_squares,
lb = -100,
ub = 100,
dim = 60,
file_name = "DE-metaheuristicOpt_ShiftedSumOfSquaresD60.txt",
problem_name = "ShiftedSumOfSquares"
)
source("problems.R")
source("shifted_problems.R")
source("de_algorithm.R")
source("problems.R")
source("shifted_problems.R")
source("abc_algorithm.R")
source("ga_algorithm.R")
source("gwo_algorithm.R")
source("gwo_algorithm.R")
source("pso_algorithm.R")
filename_runs <- paste("results/runs/ABC-metaheuristicOpt_vars=", dim, "_run=", i, ".csv", sep="")
filename_runs <- paste("results/runs/ABC-metaheuristicOpt_vars=", dim, "_run=", 1, ".csv", sep="")
filename_runs <- paste("results/runs/ABC-metaheuristicOpt_vars=", 60, "_run=", 1, ".csv", sep="")
paste("results/runs/ABC-metaheuristicOpt_vars=", 60, "_run=", 1, ".csv", sep="")
paste("results/runs/ABC-metaheuristicOpt_vars=", 60, "_run=", 1, ".csv")
cls
clear
if (!require("metaheuristicOpt")) {
install.packages("metaheuristicOpt")
library("metaheuristicOpt")
}
source("problems.R")
source("shifted_problems.R")
source("pso_algorithm.R")
source("pso_algorithm.R")
source("problems.R")
source("log_execution.R")
source("problems.R")
source("shifted_problems.R")
source("pso_algorithm.R")
sphere <- log_execution(function(xx) sum(xx^2))
sphere(c(2, 2))  # Should increment evaluationsCount to 1
sphere(c(1, 1))  # Should increment to 2, log improvement
print(environment(sphere)$log_env$evaluationsCount)  # Should print 2
print(environment(sphere)$log_env$improvements)  # Should print [[1, 8], [2, 2]]
attr(sphere, "write_improvements_to_file")("test.csv")
sphere <- log_execution(function(xx) sum(xx^2))
for (i in 1:5) {
x <- runif(2, -5, 5)  # Random input in range
sphere(x)
}
attr(sphere, "write_improvements_to_file")("test.csv")  # Check CSV
if (!require("metaheuristicOpt")) {
install.packages("metaheuristicOpt")
library("metaheuristicOpt")
}
source("log_execution.R")
source("problems.R")
source("shifted_problems.R")
source("abc_algorithm.R")
if (!require("metaheuristicOpt")) {
install.packages("metaheuristicOpt")
library("metaheuristicOpt")
}
source("log_execution.R")
source("problems.R")
source("shifted_problems.R")
#source("abc_algorithm.R")
source("de_algorithm.R")
source("ga_algorithm.R")
source("gwo_algorithm.R")
source("pso_algorithm.R")
else if (algorithm[i] == "KH") {
if (!require("metaheuristicOpt")) {
install.packages("metaheuristicOpt")
library("metaheuristicOpt")
}
source("log_execution.R")
source("problems.R")
source("shifted_problems.R")
#source("abc_algorithm.R")
#source("de_algorithm.R")
#source("ga_algorithm.R")
#source("gwo_algorithm.R")
source("pso_algorithm.R")
if (!require("metaheuristicOpt")) {
install.packages("metaheuristicOpt")
library("metaheuristicOpt")
}
source("log_execution.R")
source("problems.R")
source("shifted_problems.R")
#source("abc_algorithm.R")
#source("de_algorithm.R")
#source("ga_algorithm.R")
#source("gwo_algorithm.R")
source("pso_algorithm.R")
if (!require("metaheuristicOpt")) {
install.packages("metaheuristicOpt")
library("metaheuristicOpt")
}
source("log_execution.R")
source("problems.R")
source("shifted_problems.R")
#source("abc_algorithm.R")
#source("de_algorithm.R")
#source("ga_algorithm.R")
#source("gwo_algorithm.R")
debug(source("pso_algorithm.R"))
if (!require("metaheuristicOpt")) {
install.packages("metaheuristicOpt")
library("metaheuristicOpt")
}
source("log_execution.R")
source("problems.R")
source("shifted_problems.R")
#source("abc_algorithm.R")
#source("de_algorithm.R")
#source("ga_algorithm.R")
#source("gwo_algorithm.R")
source("pso_algorithm.R", debug=TRUE)
if (!require("metaheuristicOpt")) {
install.packages("metaheuristicOpt")
library("metaheuristicOpt")
}
source("log_execution.R")
source("problems.R")
source("shifted_problems.R")
source("pso_algorithm.R", debug=TRUE)
